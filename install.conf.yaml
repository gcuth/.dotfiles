###############################################################################
###################### DEFAULT BEHAVIOUR FOR LINKING ETC ######################
###############################################################################

- defaults:
    link:
      create: true
      relink: true

    brew:
        stdin: true
        stderr: true
        stdout: true

    cask:
        stdin: true
        stderr: true
        stdout: true

    brewfile:
        stdin: true
        stderr: true
        stdout: true


- shell:
  - [git submodule update --init --recursive, Installing submodules]


###############################################################################
################################# CLEAN START #################################
###############################################################################

- clean: ['~', '~/.local/bin/', '~/Library/Application Support/Code/User/snippets/', '~/Library/Application Support/espanso/match/', '~/Library/Application Support/espanso/config/']


###############################################################################
############### CREATE THE BASIC DIRECTORY FOR ALL DEV PROJECTS ###############
###############################################################################

- create:
    - ~/Developer/           # main directory for all dev projects
    - ~/Torrents/            # directory for torrent downloads etc
    - ~/Torrents/Incomplete/ # directory for incomplete torrent downloads
    - ~/Torrents/Complete/   # directory for complete torrent downloads
    - ~/Logs/                # convenience for lil script logs etc
    - ~/Snapshots/           # directory for incremental snapshots of things


###############################################################################
############### LINK GLOBAL SETTINGS FILES, SNIPPETS, & SCRIPTS ###############
###############################################################################

- link:
    ~/.zshrc:
      path: zshrc
      create: true
      relink: true
      force: true
    ~/.stack/config.yaml:
      path: stack/config.yaml
    ~/.zprofile:
      path: zprofile
    ~/.profile:
      path: profile
    ~/.RProfile:
      path: RProfile
    ~/.aliases:
      path: aliases
    ~/.gitignore:
      path: git/ignore
    ~/.gitconfig:
      path: git/config
    ~/.config/starship.toml:
      path: starship.toml
    ~/.local/bin/:
      path: scripts/**
      glob: true
      create: true
    ~/.lein/profiles.clj:
      path: lein/profiles.clj
    ~/Library/Application Support/Code/User/settings.json:
      path: vscode/settings.json
      create: true
      relink: true
      force: true
    ~/Library/Application Support/Code/User/snippets/:
      path: snippets/code/**
      glob: true
      create: true
    ~/Library/Application Support/espanso/config/default.yml:
      path: snippets/espanso/config.yml
      create: true
    ~/Library/Application Support/espanso/match/base.yml:
      path: snippets/espanso/match.yml
      create: true


###############################################################################
######################## INSTALL & SETUP DEFAULT STACK ########################
###############################################################################

# BREW INSTALLS
- shell: # make sure brew is installed
  - [ test -e `which brew` || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" ]
- shell: # update brew and upgrade all packages
  - brew update && brew upgrade
- cask: # install 1password first so that we can use it to authenticate others
  - 1password
- brew: # install git & git-lfs (& the github cli)
  - git
  - git-lfs
  - gh
- brew: # install tmux, fzf, etc for general easy terminal use
  - tmux
  - ripgrep
  - starship
  - iterm2
  - fzf
- brew: # install the python stack
  - python
  - pipx
- brew: # install the node stack
  - nvm
- brew: # install a ruby environment manager
  - rbenv
- brew: # install the "I use clojure all the time" stack
  - java
  - leiningen
  - borkdude/brew/babashka
- brew: # install some general db tools
  - sqlite
  - postgresql
  - sqlcipher
- brew: # install some general security-related tools
  - gpg
  - 1password-cli
- brew: # install writing & dev tools
  - pandoc
  - neovim
  - visual-studio-code
  - obsidian
  - discord
  - espanso # text expansion
- brew: # install some other general tools & qol improvements
  - jq
  - ffmpeg
  - rclone
  - rust
  - gdu
  - coreutils # the missing GNU coreutils, macOS style
  - ollama
  - exiftool
  - hovrly
  - yt-dlp
- cask: # install docker desktop
  - docker
- cask: # install tasks & fonts that require a cask
  - signal
  - anki
  - font-fira-code
  - font-hack-nerd-font
  - textexpander
  - rescuetime
  - protonvpn
  - protonmail-bridge
  - proton-drive
  - zotero
  - zoom
  - bartender
  - transmission
  - cursor
  - hazel


###############################################################################
################# INSTALL REMAINING APPS (IF NOT YET PRESENT) #################
###############################################################################

- shell:
  - [ test -e /Applications/Audio\ Hijack.app || open "https://rogueamoeba.com/audiohijack/download.php" ]


###############################################################################
############################## VSCODE EXTENSIONS ##############################
###############################################################################

# IF VSCODE EXISTS, INSTALL BASIC EXTENSIONS FROM FILE
- shell:
  - [ test -e `which code` && cat /Users/g/.dotfiles/vscode/extensions.txt | xargs -n 1 code --install-extension ]


###############################################################################
################################## CRON JOBS ##################################
###############################################################################

- crontab:
  # every minute, log the currently playing song (if any) to a csv file
  - cron: "* * * * *"
    command: osascript /Users/g/.dotfiles/applescripts/tunes.js >> ~/Library/Mobile\ Documents/iCloud\~is\~workflow\~my\~workflows/Documents/Logs/Consumption/Music/playing.csv
  # every minute, set the One Thing menu bar item to match writing progress
  - cron: "* * * * *"
    command: open --background 'one-thing:?text='"$(/opt/homebrew/bin/bb ~/.dotfiles/scripts/logwords.bb --dir ~/Library/Mobile\ Documents/iCloud~md~obsidian/Documents/Notes/Thesis/ --log ~/Logs/thesis_word_delta.log | tr -d "\n")"
  # every minute, run the 'refocus' applescript
  - cron: "* * * * *"
    command: osascript ~/.dotfiles/applescripts/refocus.applescript
  # every five minutes, run the 'every five minutes' shortcut
  - cron: "*/5 * * * *"
    command: shortcuts run "Every Five Minutes"
  # every five minutes, track notes
  - cron: "*/5 * * * *"
    command: /bin/bash ~/.dotfiles/scripts/track_notes.sh
  # every five minutes, track thesis
  - cron: "*/5 * * * *"
    command: /bin/bash ~/.dotfiles/scripts/track_thesis.sh
  # run the 'every hour' shortcut every hour at 59 minutes past
  - cron: "59 * * * *"
    command: shortcuts run "Every Hour"
  # Run the misc 'every day' shortcut every day at 4am
  - cron: "0 4 * * *"
    command: shortcuts run "Every Day"
