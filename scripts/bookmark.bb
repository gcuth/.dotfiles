#!/usr/bin/env bb
;; A script for processing 'bookmark' files (or string inputs) into a sprawling
;; personal library system.
;; 
;; The script takes as an argument one of the following:
;; 1. a url,
;; 2. a doi,
;; 3. an isbn,
;; 4. a path to a json file (usually generated by a 'note' apple shortcut).
;;
;; Attempts to read the input appropriately & extract any relevant identifiers.
;; Adds any found resources to a Zotero library if possible (via the API).
;; Also generates a markdown file with the relevant information, in an
;; Obsidian-friendly format. If a path to a json file was provided, the script
;; then moves that file to a specified directory to indicate that it has been
;; processed.
;;
;; Usage: bookmark.bb [options] <input>
;;    eg: bookmark.bb --note-dir ~/Documents/Notes --library 1234567 --key abcdefg "https://www.example.com"

(require '[cheshire.core :as json]
         '[clj-yaml.core :as yaml]
         '[babashka.curl :as curl]
         '[clojure.string :as str]
         '[babashka.cli :as cli]
         '[babashka.fs :as fs])


(def DEFAULT-CONFIG-PATHS ;; paths to check for config files.
  ["~/.config/pergamon/config.json" ;; the default config file path.
   "~/.config/pergamon/config.yaml"
   "~/.config/pergamon/config.yml"
   "~/.pergamon.json"
   "~/.pergamon.yaml"
   "~/.pergamon.yml"])


;; REGEX PATTERNS
(def doi-pattern #"(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+|10.1002/[^\s]+|10.\d{4}/\d+-\d+X?(\d+)\d+<[\d\w]+:[\d\w]*>\d+.\d+.\w+;\d|10.1021/\w\w\d+|10.1207/[\w\d]+\&\d+_\d+)")
(def isbn-pattern #"(?=(?:\D*\d){10}(?:(?:\D*\d){3})?$)[\d-]+")
(def url-pattern #"(https?://[^\s]+)")


(defn get-config
  "Given a list of paths, finds & reads the first one that exists, returning
   the parsed config as a map. Returns nil if no config file is found."
  ([] (get-config DEFAULT-CONFIG-PATHS))
  ([paths]
   (let [config-path (first (map fs/unixify
                                 (filter fs/exists?
                                         (map fs/expand-home paths))))]
     ;; read the config file based on its extension.
      (cond
        (.endsWith config-path ".json") (json/parse-string (slurp config-path) true)
        (.endsWith config-path ".yaml") (yaml/parse-string (slurp config-path))
        (.endsWith config-path ".yml") (yaml/parse-string (slurp config-path))
        :else nil))))


(defn valid-isbn?
  "Given an isbn string, return a boolean indicating whether the string
   is a valid isbn. This validation is more strict than the regex match,
   and uses the check digit as specified for both 10- and 13-number isbns."
  [isbn]
  (let [isbn (str/replace isbn "-" "")]
    (cond
      (= 10 (count isbn))
      (let [digits (take 9 (map #(Integer/parseInt (str %)) (str/split isbn #"")))
            check-digit (Integer/parseInt (str/replace (str (last isbn)) "X" "10"))
            sum (reduce + (map * digits (range 10 1 -1)))]
        (= 0 (mod (+ sum check-digit) 11)))
      (= 13 (count isbn))
      (let [digits (take 12 (map #(Integer/parseInt (str %)) (str/split isbn #"")))
            check-digit (Integer/parseInt (str (last isbn)))
            sum (reduce + (map * digits (cycle [1 3])))]
        (= 0 (mod (- 10 (mod sum 10)) check-digit)))
      :else false)))


(defn extract-identifiers
  "Given a string, returns a map of identifiers extracted from the string.
   Currently supports doi, isbn, and url."
  [s]
  (let [doi (re-find doi-pattern s)
        isbn (re-find isbn-pattern s)
        url (re-find url-pattern s)]
    {:doi doi
     :isbn isbn
     :url url}))


(defn send-to-internet-archive
  "Send a url to the internet archive 'wayback machine' for archiving."
  [url]
  ;; "https://web.archive.org/save/<url>"
  (let [archive-url (str "https://web.archive.org/save/" url)]
    (curl/get archive-url)))


(defn send-to-archive-today
  "Send a url to archive.today for archiving."
  [url]
  nil ;; TODO: Implement this.
  )


(defn send-to-zotero
  "Send a url or identifier to zotero for archiving.
   Accepts options for library id and api key."
  [identifier & {:keys [library-id api-key] :or {library-id zotero-library-id
                                                  api-key zotero-api-key}}]
  nil ;; TODO: Implement this.
  )



(defn process-json-file
  "Read & process a json file generated by a custom apple 'note' shortcut.
   Identifies key info from the bookmark file. Sends identifiers to zotero,
   urls to archive (on archive.today & the internet archive), and attempts to
   generate relevant note files (or append to existing ones)."
  [path options]
  (let [info (json/parse-string (slurp path) true) ;; the json file contents.
        note (:note info) ;; whatever was in the note text (usually nothing.)
        selection (-> info :bookmark :safari_web_page :selection)
        bookmark (:bookmark info) ;; a map, containing maps of captured info.
        raw-values (distinct (flatten (map vals (vals bookmark))))
        values (filter #(not (str/blank? %)) raw-values) ;; all the values.
        raw-identifiers (map extract-identifiers values) ;; urls, dois, isbns.
        isbns (filter valid-isbn? (distinct (flatten (filter some? (map :isbn raw-identifiers)))))
        dois (filter some? (distinct (flatten (filter some? (map :doi raw-identifiers)))))
        urls (filter some? (distinct (flatten (filter some? (map :url raw-identifiers)))))]
    (doseq [isbn isbns] ;; send each isbn to zotero.
      (send-to-zotero isbn options))
    (doseq [doi dois] ;; send each doi to zotero.
      (send-to-zotero doi options))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CLI ARGUMENTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def defaults (get-config)) ;; get the default config file, if it exists.

(def cli-spec ;; CLI argument spec.
  {:input {:default nil
           :help "The input bookmark string to process."
           :parse-fn str}
   :library-id {:default (get defaults :library-id)
                :help "The id of the zotero library to add to."
                :parse-fn #(Integer/parseInt %)}
   :api-key {:default (get defaults :api-key)
             :help "The api key to use for zotero."
             :parse-fn str}
   :note-dir {:default (get defaults :note-directory)
              :help "The directory in which to generate notes."
              :parse-fn str}
   :backup-dir {:default (get defaults :processed-bookmarks-directory)
                :help "The directory to move processed bookmarks to (as backups)."
                :parse-fn str}
   :help {:coerce :boolean}})

(def cli-aliases ;; CLI argument aliases for convenience.
  {:i :input
   :note :input
   :library :library-id
   :key :api-key})

(defn -main
  "Take whatever is passed to the script from command line args.
   Process it and output."
  []
  (let [defaults (get-config)
        input (cli/parse-args *command-line-args* {:spec cli-spec
                                                   :aliases cli-aliases})
        args (:args input)
        opts (:opts input)]
    ;; process all arg inputs
    (doseq [arg args]
      (cond (.endsWith arg ".json")
            (prn (process-json-file arg opts))
            :else (prn "Not a json")))))

(-main)