#!/usr/bin/env python3
#
# Usage:   ./calculate_words_today
#
# Purpose: Check for a thesis word log file and report the words written today

import os
import datetime

def read_log(path_to_word_count_log='~/.dotfiles/secrets/logs/thesis_chapter_words.log'):
    with open(os.path.expanduser(path_to_word_count_log), 'r') as f:
        logs = f.readlines()
        logs = [x.strip() for x in logs]
    return [x.split(', ') for x in logs]

def convert_raw_log_list_to_times(log_list):
    return [(datetime.datetime.fromtimestamp(int(x[0])), int(x[1])) for x in log_list]

def filter_log_list_for_yesterday(log_list):
    """Take a log list and return the entries for yesterday."""
    yesterday = datetime.datetime.today() - datetime.timedelta(days=1)
    return [x for x in log_list if x[0].date() == yesterday.date()]

def filter_log_list_for_today(log_list):
    """Take a log list and return the entries for today."""
    return [x for x in log_list if x[0].date() == datetime.datetime.now().date()]

def main():
    try:
        raw_log_list = read_log()
        log_list = convert_raw_log_list_to_times(raw_log_list)
        log_today = filter_log_list_for_today(log_list)
        log_yesterday = filter_log_list_for_yesterday(log_list)
        if len(log_today) > 0 and len(log_yesterday) > 0:
            yesterday_last = log_yesterday[-1][1]
            today_max = max([x[1] for x in log_today])
            words_written_today = today_max - yesterday_last
            print(words_written_today)
        else:
            print(0)
    except IOError as exception:
        print(0)

if __name__ == "__main__":
    main()
