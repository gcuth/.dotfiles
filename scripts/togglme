#!/usr/bin/env python3
#
# A quick (cron-suitable) script for managing toggl

import os
import sys
import re
import subprocess

def get_active_window_name():
    raw_xprop_active_window = subprocess.check_output("xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) WM_NAME",
            stderr=subprocess.STDOUT,
            shell=True)
    window_name = re.findall(r'".+"', raw_xprop_active_window.decode('utf-8'))[0][1:-1]
    return window_name

def get_current_toggl():
    try:
        status = subprocess.check_output("/usr/local/bin/toggl now", shell=True)
        return status.decode('utf-8').strip()
    except subprocess.CalledProcessError as e:
        return e.output.decode('utf-8').strip()

def window_is_anki(current_window_string):
    if 'Anki' in current_window_string:
        return True
    else:
        return False

def window_is_thesis(current_window_string):
    if 'thesis' in current_window_string.lower() or 'zotero' in current_window_string.lower():
        return True
    else:
        return False

def window_is_reading(current_window_string):
    if '.pdf' in current_window_string.lower() or 'epub' in current_window_string.lower() or 'zotero' in current_window_string.lower():
        return True
    else:
        return False

def window_is_blog(current_window_string):
    if 'blog' in current_window_string.lower():
        return True
    else:
        return False

def window_is_code(current_window_string):
    window = current_window_string.lower()
    if 'zsh' in window or 'bash' in window or 'visual studio code' in window or 'tmux' in window:
        return True
    else:
        return False

def toggl_is_anki(current_toggl_string):
    project = current_toggl_project(current_toggl_string)
    if project == 'Anki':
        return True
    else:
        return False

def toggl_is_active(current_toggl_string):
    if 'There is no time entry running!' in current_toggl_string:
        return False
    else:
        return True

def get_current_toggl_project(current_toggl_string):
    return re.findall(r'(?<=Project: ).+(?= \(\#)', current_toggl_string)[0]

def get_current_toggl_tags(current_toggl_string):
    lines = current_toggl_string.split('\n')
    tags = [l for l in lines if l.startswith('Tags: ')][0][5:].strip().split(', ')
    return [t for t in tags if len(t)>0]

def window_is_media(current_window_string):
    window = current_window_string.lower()
    if 'netflix' in window or 'youtube' in window or 'fmovies' in window or 'videos' in window:
        return True
    else:
        return False
    pass

def window_is_internet(current_window_string):
    window = current_window_string.lower()
    if 'mozilla firefox' in window or 'chromium' in window:
        return True
    else:
        return False

def window_is_social(current_window_string):
    window = current_window_string.lower()
    if 'signal' in window or 'telegram' in window or 'mozilla thunderbird':
        return True
    else:
        return False

def window_is_prediction(current_window_string):
    window = current_window_string.lower()
    if 'metaculus' in window or 'polymarket' in window or 'augur' in window or 'predictit' in window:
        return True
    else:
        return False

def get_best_toggl_project_from_window_string(current_window_string):
    if window_is_anki(current_window_string):
        return 'Anki'
    elif window_is_thesis(current_window_string):
        return 'Thesis'
    elif window_is_reading(current_window_string):
        return 'Read'
    elif window_is_blog(current_window_string):
        return 'Blog'
    elif window_is_code(current_window_string):
        return 'Code'
    elif window_is_media(current_window_string):
        return 'Media'
    elif window_is_prediction(current_window_string):
        return 'Predict'
    elif window_is_internet(current_window_string):
        return 'Internet'
    elif window_is_social(current_window_string):
        return 'Social'
    else:
        return None

def get_best_toggl_tags_from_window_string(current_window_string):
    best_tags = []
    window = current_window_string.lower()
    if 'visual studio code' in window:
        best_tags.append('code')
    if 'stack overflow' in window:
        best_tags.append('code')
    if ' vim ' in window:
        best_tags.append('code')
    if ' repl ' in window:
        best_tags.append('code')
    if ' tmux ' in window:
        best_tags.append('code')
    if ' zsh ' in window:
        best_tags.append('code')
    if ' rstudio ' in window:
        best_tags.append('code')
        best_tags.append('r')
        best_tags.append('rmd')
    if ' clojure ' in window:
        best_tags.append('code')
        best_tags.append('clojure')
    if ' python3 ' in window:
        best_tags.append('code')
    if 'mozilla thunderbird' in window or '- gmail -' in window:
        best_tags.append('social')
        best_tags.append('email')
    if 'signal' in window or 'telegram' in window:
        best_tags.append('social')
        best_tags.append('im')
    if 'polymarket' in window or 'metaculus' in window or 'augur' in window:
        best_tags.append('prediction')
        best_tags.append('forecasting')
    if 'python' in window or '.py ' in window:
        best_tags.append('python')
        best_tags.append('code')
    if '.pdf' in window or 'epub' in window:
        best_tags.append('reading')
        best_tags.append('study')
    if 'anki' in window:
        best_tags.append('memorisation')
        best_tags.append('study')
    return best_tags

def build_toggl_call(project, tags, description):
    call = None
    if isinstance(project, str) and isinstance(tags, list):
        tags = ','.join(tags)
        call = f'/usr/local/bin/toggl start -o "{project}" -a "{tags}"'
    if isinstance(description, str) and len(description) > 0:
        call = call + f' "{description}"'
    return call

def build_best_description(path=None, window_text=None):
    description = ''
    if path or window_text:
        if path:
            head, tail = os.path.split(path)
            fname = tail.split('.')[0]
            project = best_project_from_fp(path)
            if project is None and window_text is not None:
                project = get_best_toggl_project_from_window_string(window_text)
            if project == 'Code':
                if '/Code/' in path:
                    repo = path.split('/Code/')[-1].split('/')[0]
                    description = f'Working on {repo}.'
                else:
                    description = f'Working on {fname}.'
            elif project == 'Thesis':
                if 'chapters' in head:
                    description = f'Writing {fname} chapter.'
                elif 'papers' in head:
                    description = f'Writing {fname} paper.'
                else:
                    description = f'Working on {fname}.'
            elif project == 'Blog':
                if 'notes' in head:
                    description = f'Writing a note at {fname}.'
                elif 'journals' in head:
                    description = f'Journalling for {fname}.'
                else:
                    description = f'Tinkering with {tail} in the blog.'
        else:
            project = get_best_toggl_project_from_window_string(window_text)
            if project == 'Code':
                if 'Visual Studio Code' in window_text:
                    fname = window_text.replace(' - Visual Studio Code','')
                    description = f'Working on {fname}.'
                elif 'RStudio' in window_text:
                    description = 'Modelling in RStudio.'
                elif 'clojure' in window_text:
                    description = 'Clojure hacking.'
            if project == 'Read':
                if 'Zotero' in window_text:
                    description = 'Managing the zotero library.'
    return description

def best_project_from_fp(path):
    if '/Code/' in path:
        return 'Code'
    elif '/thesis/' in path:
        return 'Thesis'
    elif '/quotes/' in path or '/readings/' in path:
        return 'Read'
    elif '/blog/' in path:
        return 'Blog'
    else:
        return None

def main(system_args):
    # SET THE BASIC VARIABLES
    project_tags = []
    best_project = ''
    active_fp = None
    current_toggl_project = None
    current_toggl_tags = None
    active_window = None
    # GET CURRENT TOGGL STATUS & LEAD PROJECT/TAGS IF POSSIBLE
    current_toggl = get_current_toggl()
    if toggl_is_active(current_toggl):
        current_toggl_project = get_current_toggl_project(current_toggl)
        current_toggl_tags = get_current_toggl_tags(current_toggl)
    # IF CALLED WITHOUT ANY SYSTEM ARGS, USE ACTIVE WINDOW FOR BEST GUESS
    if len(system_args) == 0:
        active_window = get_active_window_name()
        best_project = get_best_toggl_project_from_window_string(active_window)
        project_tags = get_best_toggl_tags_from_window_string(active_window)
    # IF A FILE PATH WAS PASSED, USE IT TO GET THE BEST PROJECT & BASIC TAGS
    if len(system_args) > 0:
        active_fp = system_args[0]
        best_project = best_project_from_fp(active_fp)
        if '/Code/' in active_fp:
            project_tags.append('code')
        elif '/thesis/' in active_fp:
            project_tags.append('thesis')
            project_tags.append('study')
        elif '/quotes/' in active_fp or '/readings/' in active_fp:
            project_tags.append('reading')
            project_tags.append('study')
        elif '/blog/' in active_fp:
            project_tags.append('writing')
        else:
            active_window = get_active_window_name()
            best_project = get_best_toggl_project_from_window_string(active_window)
    # IF TOGGL PROJECT AND BEST GUESS MATCH, EXIT WITHOUT ALTERING
    if best_project == current_toggl_project:
        exit(0)
    # IF NOT, DO YOUR BEST TO CONSTRUCT A TOGGL CALL.
    else:
        # ADD SYNTAX TAG IF POSSIBLE
        if len(system_args) > 1:
            syntax = system_args[1]
            if syntax in ['markdown','rmd','md','latex','txt']:
                project_tags.append('writing')
            else:
                project_tags.append('code')
                project_tags.append(syntax)
        project_tags = sorted(list(set(project_tags)))
        best_description = build_best_description(path=active_fp, window_text=active_window)
        toggl_call = build_toggl_call(best_project, project_tags, best_description)
        if toggl_call:
            subprocess.call(toggl_call, shell=True)
        exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
