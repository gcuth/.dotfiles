#!/usr/bin/env python3
#
# Usage:   update_exist_tags [verb] [input/options]
#    eg.   update_exist_tags add --tag "social some person" --date "2018-02-11"
#          update_exist_tags list --date "2018-03-23"
#          update_exist_tags add --tag "another tag" --token "80424091tdsi6d9y30etc"
#          update_exist_tags remove --tag "some additional tag"
#
# Purpose: A script for interfacing with (and displaying) exist tags.

import argparse
import datetime
import requests
import json
import sys
import os
import re
import time

TODAY_SHORT = datetime.datetime.today().strftime('%Y-%m-%d')

def read_access_token_from_file(path_to_saved_token='~/.dotfiles/secrets/exist/existtagstoken'):
    with open(os.path.expanduser(path_to_saved_token), 'r') as f:
        raw_exist_token = f.read()
    return raw_exist_token.strip()


def build_oauth_header(access_token):
    """Take an access token and return a valid oauth header for requests."""
    bearer_token = 'Bearer ' + str(access_token).strip()
    header = {'Content-type': 'application/json', 'Authorization':bearer_token}
    return header

def is_date(text):
    """Take a string and return true if a valid of the form YYYY-MM-DD."""
    try:
        datetime.datetime.strptime(text, '%Y-%m-%d')
        return True
    except ValueError:
        raise ValueError("Incorrect data format, should be YYYY-MM-DD.")
        return False

def acquire_attribute(attribute_name, auth_header):
    """Take an attribute name + an exist.io oauth header and acquire the attribute."""
    url = 'https://exist.io/api/1/attributes/acquire/'
    attributes = [{"name":attribute_name, "active":True}]
    response = requests.post(url,
                             headers=auth_header,
                             data=json.dumps(attributes))
    if not response.ok:
        print(str(response.ok) + ' ' + str(response.status_code))
    response_data = response.json()
    return response_data


def list_owned_attributes(auth_header):
    """Take an exist.io oauth header and return a list of attributes owned by it."""
    url = 'https://exist.io/api/1/attributes/owned/'
    response = requests.get(url, headers=auth_header)
    response_data = response.json()
    return response_data


def release_attribute(attribute_name, auth_header):
    """Take an attribute name + an exist.io oauth header and release the attribute."""
    url = 'https://exist.io/api/1/attributes/release/'
    attributes = [{"name":attribute_name}]
    response = requests.post(url,
                             headers=auth_header,
                             data=json.dumps(attributes))
    response_data = response.json()
    return response_data


def update_attribute(attribute_name, date, value, auth_header):
    """Take an attribute name, date, value, and auth_header and update exist.io."""
    url = 'https://exist.io/api/1/attributes/update/'
    attributes = [{"name":attribute_name, "date":date, "value":value}]
    response = requests.post(url,
                             headers=auth_header,
                             data=json.dumps(attributes))
    response_data = response.json()
    return response_data


def read_attribute_value(attribute_name, date, auth_header):
    """Read the value of a given exist.io attribute name."""
    url = 'https://exist.io/api/1/users/$self/attributes/'+str(attribute_name)+'/'
    response = requests.get(url, headers=auth_header)
    response_data = response.json()
    attr_value = 0
    for dv_pair in response_data['results']:
        if dv_pair['date'] == date:
            attr_value = dv_pair['value']
    return attr_value


def validate_tag(raw_tag):
    """Take a raw tag and convert it to a valid form"""
    regex = re.compile(r'[\W]', re.UNICODE)
    tag = raw_tag.replace(' ', '_')
    tag = regex.sub('', tag)
    tag = tag.strip('_').lower()
    if len(tag) == 0:
        raise Exception("Tag '%s' contains too many invalid characters" % raw_tag)
    return tag


def convert_tag_list_to_string(tag_list):
    """tk"""
    if type(tag_list) is list and len(tag_list) > 0:
        clean_tag_list = [validate_tag(t) for t in tag_list]
        tag_string = ', '.join(clean_tag_list)
        return tag_string
    else:
        return ''


def convert_tag_string_to_list(tag_string):
    """tk"""
    if type(tag_string) is str:
        tag_list = tag_string.split(', ')
        return tag_list
    else:
        return []


def is_owned(attribute_name, auth_header):
    """Check to confirm that a given exist.io attribute is owned by the app."""
    owned = []
    owned_response = list_owned_attributes(auth_header)
    if len(owned_response) > 0:
        for i in owned_response:
            if 'attribute' in i:
                owned.append(i['attribute'])
    return (attribute_name in owned)


def confirm_ownership(attribute_name, auth_header):
    """Take an attribute name, check its ownership, and acquire if necessary."""
    if not is_owned(attribute_name, auth_header):
        acquire_attribute(attribute_name, auth_header)


def list_tags(date, raw_token):
    """Take a date and a token; return a list of all tags on that date."""
    if is_date(date):
        header = build_oauth_header(raw_token)
        confirm_ownership('custom', header)
        raw_tags = read_attribute_value(attribute_name = 'custom',
                                        date = date,
                                        auth_header = header)
        tags = convert_tag_string_to_list(raw_tags)
        return tags
    else:
        return []


def list_all_current_tags(date, raw_token):
    """TK FIXME"""
    if is_date(date) and date is TODAY_SHORT:
        auth_header = build_oauth_header(raw_token)
        confirm_ownership('custom', auth_header)
        url = 'https://exist.io/api/1/users/$self/today/'
        response = requests.get(url, headers=auth_header)
        response_data = response.json()
        complete_tags_list = []
        for group in response_data['attributes']:
            if group['group'] == 'custom':
                for item in group['items']:
                    if item['priority'] > 1 and item['value'] == 1:
                        complete_tags_list.append(item['attribute'])
        return complete_tags_list
    elif is_date(date):
        auth_header = build_oauth_header(raw_token)
        confirm_ownership('custom', auth_header)
        url = 'https://exist.io/api/1/users/$self/attributes/'
        response = requests.get(url, headers=auth_header)
        response_data = response.json()
        complete_tags_list = []
        for attribute in response_data:
            if attribute['group']['name'] == 'custom' and attribute['priority'] > 1:
                for value_block in attribute['values']:
                    if value_block['date'] == date and value_block['value'] > 0:
                        complete_tags_list.append(attribute['attribute'])
        return complete_tags_list
    else:
        return list_tags(date, raw_token)


def add_tags(raw_tags, date, raw_token):
    """Process list of raw tags and append them to exist.io for a target date"""
    current_tags = list_all_current_tags(date, raw_token)
    if type(raw_tags) is not list: raw_tags = []
    tags_to_add = [validate_tag(t) for t in raw_tags]
    new_tags_list = current_tags + tags_to_add
    new_tags_list = list(set(new_tags_list))
    if is_date(date):
        header = build_oauth_header(raw_token)
        confirm_ownership('custom', header)
        tags_string = convert_tag_list_to_string(new_tags_list)
        update_attribute(attribute_name='custom',
                         date=date,
                         value=tags_string,
                         auth_header=header)


def delete_tags(raw_tags, date, raw_token):
    """Process list of raw tags and delete them from exist.io for a target date"""
    current_tags = list_all_current_tags(date, raw_token)
    if type(raw_tags) is not list: raw_tags = []
    tags_to_delete = [validate_tag(t) for t in raw_tags]
    new_tags_list = [t for t in current_tags if t not in tags_to_delete]
    new_tags_list = list(set(new_tags_list))
    if is_date(date):
        header = build_oauth_header(raw_token)
        confirm_ownership('custom', header)
        tags_string = convert_tag_list_to_string(new_tags_list)
        update_attribute(attribute_name='custom',
                         date=date,
                         value=tags_string,
                         auth_header=header)


def remove_excess_exercise_tags(tag_list):
    """Take a list of tags and remove duplicate exercise tags with fewer sets"""
    sets_reps_regex = re.compile(r'^.*\d+x\d+$')
    exercise_tags = list(filter(sets_reps_regex.match, tag_list))
    exercises = list(set([re.sub(r'^\d+kg_', '', re.sub(r'_\d+x\d+$', '', t)) for t in exercise_tags]))
    for exercise in exercises:
        specific_exercise_tags = [t for t in exercise_tags if exercise in t]
        if len(specific_exercise_tags) > 1:
            exercises_with_sets = [(t, int(re.search(r'\d+x', t).group(0)[:-1])) for t in specific_exercise_tags]
            max_sets = max([t[1] for t in exercises_with_sets])
            to_remove = [t[0] for t in exercises_with_sets if t[1] is not max_sets]
            tag_list = [t for t in tag_list if t not in to_remove]
    return tag_list


def clean_tags(date, raw_token):
    """Clean the tag list for a target date on exist.io"""
    tag_list = list_all_current_tags(date, raw_token)
    clean_tag_list = remove_excess_exercise_tags(tag_list)
    if is_date(date):
        header = build_oauth_header(raw_token)
        confirm_ownership('custom', header)
        tags_string = convert_tag_list_to_string(clean_tag_list)
        update_attribute(attribute_name='custom',
                         date=date,
                         value=tags_string,
                         auth_header=header)


class ManageExistTags(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description='A simple exist tag/mood logger',
            usage='''update_exist_tags <command> [<args>]

The most commonly used todo commands are:
   list       Show tag items for a date (default today)
   add        Add tag(s) to an exist.io log for a date (default today)
   delete     Delete tag(s) from an exist.io log for a date (default today)
   clean      Remove duplicate exercise tags with lower sets etc for a date
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def list(self):
        parser = argparse.ArgumentParser(description='Show exist.io tag items for a date (default today)')
        parser.add_argument('--date', dest='date', default=TODAY_SHORT)
        parser.add_argument('--token', dest='token', default=read_access_token_from_file())
        args = parser.parse_args(sys.argv[2:])
        tags = list_all_current_tags(date=args.date, raw_token=args.token)
        print(tags)

    def add(self):
        parser = argparse.ArgumentParser(description='Add tag(s) to exist.io log for a date (default today)')
        parser.add_argument('--tag', dest='tags', action='append', default=None)
        parser.add_argument('--date', dest='date', default=TODAY_SHORT)
        parser.add_argument('--token', dest='token', default=read_access_token_from_file())
        args = parser.parse_args(sys.argv[2:])
        if args.tags:
            add_tags(raw_tags = args.tags,
                     date = args.date,
                     raw_token = args.token)

    def delete(self):
        parser = argparse.ArgumentParser(description='Delete tag(s) from an exist.io log for a date (default today)')
        parser.add_argument('--tag', dest='tags', action='append', default=None)
        parser.add_argument('--date', dest='date', default=TODAY_SHORT)
        parser.add_argument('--token', dest='token', default=read_access_token_from_file())
        args = parser.parse_args(sys.argv[2:])
        if args.tags:
            delete_tags(raw_tags = args.tags,
                        date = args.date,
                        raw_token = args.token)

    def clean(self):
        parser = argparse.ArgumentParser(description='tk')
        parser.add_argument('--date', dest='date', default=TODAY_SHORT)
        parser.add_argument('--token', dest='token', default=read_access_token_from_file())
        args = parser.parse_args(sys.argv[2:])
        clean_tags(date=args.date, raw_token=args.token)


def main():
    ManageExistTags()


if __name__=="__main__":
    main()

